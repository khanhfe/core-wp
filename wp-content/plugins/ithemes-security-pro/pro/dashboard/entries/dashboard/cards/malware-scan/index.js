/**
 * External dependencies
 */
import classnames from 'classnames';
import memize from 'memize';

/**
 * WordPress dependencies
 */
import { __, sprintf } from '@wordpress/i18n';
import { dateI18n } from '@wordpress/date';
import { Button, Modal } from '@wordpress/components';
import { compose, withState, withInstanceId } from '@wordpress/compose';

/**
 * Internal dependencies
 */
import { getConfigValue } from '../../utils';
import ScanOnly from './scan-only';
import Header, { Title, Date } from '../../components/card/header';
import { FooterSchemaActions } from '../../components/card/footer';
import { MalwareScanResults, SiteScanResults, PrintR } from '@ithemes/security-components';
import './style.scss';

function getScanStatus( entry ) {
	switch ( entry.code ) {
		case 'scan-failure-server-error':
		case 'scan-failure-client-error':
		case 'sucuri-system-error':
		case 'error':
			return [ 'warn', __( 'Scan Error', 'it-l10n-ithemes-security-pro' ) ];
		case 'clean':
			return [ 'clean', __( 'Clean', 'it-l10n-ithemes-security-pro' ) ];
		default:
			const parts = [];
			let status = 'unknown';

			for ( const part of entry.code.split( '--' ) ) {
				switch ( part ) {
					case 'found-malware':
						parts.push( __( 'Found Malware', 'it-l10n-ithemes-security-pro' ) );
						status = 'error';
						break;
					case 'on-blacklist':
						parts.push( __( 'On Blacklist', 'it-l10n-ithemes-security-pro' ) );
						status = 'error';
						break;
					case 'vulnerable-software':
						parts.push( __( 'Vulnerable Software', 'it-l10n-ithemes-security-pro' ) );
						status = 'error';
						break;
					case 'has-error':
						parts.push( __( 'Scan Error', 'it-l10n-ithemes-security-pro' ) );
						status = status === 'unknown' ? 'warn' : status;
						break;
					default:
						parts.push( part );
						break;
				}
			}

			if ( status === 'unknown' ) {
				return [ status, entry.code ];
			}

			return [ status, parts.join( ', ' ) ];
	}
}

const isSameUrl = memize( ( a, b ) => String( a ).replace( /https?:\/\//, '' ) === String( b ).replace( /https?:\/\//, '' ) );

function MalwareScan( { card, config, viewEntry, scanResults, showRawDetails, setState, instanceId } ) {
	return (
		<div className="itsec-card--type-malware-scan">
			<Header>
				<Title card={ card } config={ config } />
				<Date card={ card } config={ config } />
			</Header>
			<section className="itsec-card-malware-scan__scans-section">
				<table className="itsec-card-malware-scan__scans">
					<thead>
						<tr>
							<th>{ __( 'Time', 'it-l10n-ithemes-security-pro' ) }</th>
							<th>{ __( 'Status', 'it-l10n-ithemes-security-pro' ) }</th>
							<th><span className="screen-reader-text">{ __( 'Actions', 'it-l10n-ithemes-security-pro' ) }</span></th>
						</tr>
					</thead>
					<tbody>
						{ card.data.map( ( log ) => {
							const [ status, label ] = getScanStatus( log );

							return (
								<tr key={ log.id }>
									<th scope="row">{ dateI18n( 'M d, Y g:i A', log.time ) }</th>
									<td>
										<span className={ classnames( 'itsec-card-malware-scan__scan-status', `itsec-card-malware-scan__scan-status--${ status }` ) }>
											{ label }
										</span>
									</td>
									<td>
										<Button isLink aria-pressed={ viewEntry === log.id } onClick={ () => setState( { viewEntry: log.id } ) }>
											{ __( 'View', 'it-l10n-ithemes-security-pro' ) }
										</Button>
										{ viewEntry === log.id && (
											<Modal
												title={ sprintf( __( 'View Scan Details for %s', 'it-l10n-ithemes-security-pro' ), dateI18n( 'M d, Y g:i A', log.time ) ) }
												onRequestClose={ () => setState( { viewEntry: 0, showRawDetails: false } ) }
											>
												{ log.results.entries ?
													<SiteScanResults results={ log.results } showSiteUrl={ ! isSameUrl( log.results.url, getConfigValue( 'site_url' ) ) } authContext={ getConfigValue( 'site_scanner_auth' ) } /> :
													<MalwareScanResults results={ log.results } />
												}
												<Button className="itsec-card-malware-scan__raw-details-toggle" isLink onClick={ () => setState( { showRawDetails: ! showRawDetails } ) }
													aria-expanded={ showRawDetails } aria-controls={ `itsec-card-malware-scan__raw-details--${ instanceId }` }>
													{ showRawDetails ? __( 'Hide Raw Details', 'it-l10n-ithemes-security-pro' ) : __( 'Show Raw Details', 'it-l10n-ithemes-security-pro' ) }
												</Button>
												<div id={ `itsec-card-malware-scan__raw-details--${ instanceId }` } style={ { visibility: showRawDetails ? 'visible' : 'hidden' } }>
													{ showRawDetails && <PrintR json={ log.results } /> }
												</div>
											</Modal>
										) }
									</td>
								</tr>
							);
						} ) }
					</tbody>
				</table>
			</section>
			<FooterSchemaActions card={ card } onComplete={ ( href, response ) => href.endsWith( '/scan' ) && setState( { scanResults: response.results } ) } />
			{ scanResults && (
				<Modal
					title={ __( 'Scan Results', 'it-l10n-ithemes-security-pro' ) }
					onRequestClose={ () => setState( { scanResults: undefined } ) }
				>
					{ scanResults.entries ? <SiteScanResults results={ scanResults } showSiteUrl={ false } authContext={ getConfigValue( 'site_scanner_auth' ) } /> : <MalwareScanResults results={ scanResults } /> }
				</Modal>
			) }
		</div>
	);
}

export const slug = 'malware-scan';
export const settings = {
	render: getConfigValue( 'db_logs' ) ? compose( [
		withState( { viewEntry: 0, scanResults: undefined, showRawDetails: false } ),
		withInstanceId,
	] )( MalwareScan ) : ScanOnly,
};
